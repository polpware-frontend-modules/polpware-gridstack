import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
var GridstackService = /** @class */ (function () {
    function GridstackService() {
        this._gridItems = [];
        this._grids = [];
    }
    GridstackService.prototype.addGrid = function (grid) {
        this._grids.push(grid);
    };
    GridstackService.prototype.removeGrid = function (grid) {
        this._grids.splice(this._grids.findIndex(function (g) { return g.generatedId == grid.generatedId; }), 1);
        this._gridItems = this._gridItems.filter(function (gi) { return gi.gridId != grid.generatedId; });
    };
    GridstackService.prototype.attachGridItem = function (gridId, gridItemId) {
        this._gridItems.find(function (gi) { return gi.item.generatedId == gridItemId; }).gridId = gridId;
    };
    GridstackService.prototype.detachGridItemIfExists = function (gridItemId) {
        var gridItem = this._gridItems.find(function (gi) { return gi.item.generatedId == gridItemId; });
        if (!!gridItem) {
            gridItem.gridId = null;
        }
    };
    GridstackService.prototype.getGridItems = function (gridId) {
        return this._gridItems.filter(function (gi) { return gi.gridId == gridId; }).map(function (g) { return g.item; });
    };
    GridstackService.prototype.getOrphanGridItems = function () {
        return this._gridItems.filter(function (gi) { return gi.gridId == null; }).map(function (g) { return g.item; });
    };
    GridstackService.prototype.addOrphanGridItem = function (gridItem) {
        this._gridItems.push({
            gridId: null,
            item: gridItem
        });
    };
    GridstackService.prototype.removeGridItem = function (gridItemId) {
        this._gridItems.splice(this._gridItems.findIndex(function (gi) { return gi.item.generatedId == gridItemId; }), 1);
    };
    GridstackService = __decorate([
        Injectable()
    ], GridstackService);
    return GridstackService;
}());
export { GridstackService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0YWNrLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbGlicmlhL2dyaWRzdGFjay8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9ncmlkc3RhY2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUszQztJQVFJO1FBUFEsZUFBVSxHQUdaLEVBQUUsQ0FBQztRQUVELFdBQU0sR0FBVyxFQUFFLENBQUM7SUFFWixDQUFDO0lBRVYsa0NBQU8sR0FBZCxVQUFlLElBQVU7UUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLHFDQUFVLEdBQWpCLFVBQWtCLElBQVU7UUFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQWpDLENBQWlDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNyRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsV0FBVyxFQUE3QixDQUE2QixDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLHlDQUFjLEdBQXJCLFVBQXNCLE1BQWMsRUFBRSxVQUFrQjtRQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDbEYsQ0FBQztJQUVNLGlEQUFzQixHQUE3QixVQUE4QixVQUFrQjtRQUM1QyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxJQUFJLFVBQVUsRUFBakMsQ0FBaUMsQ0FBQyxDQUFDO1FBRS9FLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRTtZQUNaLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQztJQUVNLHVDQUFZLEdBQW5CLFVBQW9CLE1BQWM7UUFDOUIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxNQUFNLElBQUksTUFBTSxFQUFuQixDQUFtQixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRU0sNkNBQWtCLEdBQXpCO1FBQ0ksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxVQUFBLEVBQUUsSUFBSSxPQUFBLEVBQUUsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFqQixDQUFpQixDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRU0sNENBQWlCLEdBQXhCLFVBQXlCLFFBQWtCO1FBQ3ZDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ2pCLE1BQU0sRUFBRSxJQUFJO1lBQ1osSUFBSSxFQUFFLFFBQVE7U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLHlDQUFjLEdBQXJCLFVBQXNCLFVBQWtCO1FBQ3BDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLFVBQUEsRUFBRSxJQUFJLE9BQUEsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxFQUFqQyxDQUFpQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbEcsQ0FBQztJQWhEUSxnQkFBZ0I7UUFENUIsVUFBVSxFQUFFO09BQ0EsZ0JBQWdCLENBaUQ1QjtJQUFELHVCQUFDO0NBQUEsQUFqREQsSUFpREM7U0FqRFksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbW9kZWxzL2dyaWQnO1xuaW1wb3J0IHsgR3JpZEl0ZW0gfSBmcm9tICcuLi9jb21wb25lbnRzL21vZGVscy9ncmlkLWl0ZW0nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR3JpZHN0YWNrU2VydmljZSB7XG4gICAgcHJpdmF0ZSBfZ3JpZEl0ZW1zOiB7XG4gICAgICAgIGdyaWRJZDogc3RyaW5nO1xuICAgICAgICBpdGVtOiBHcmlkSXRlbTtcbiAgICB9W10gPSBbXTtcblxuICAgIHByaXZhdGUgX2dyaWRzOiBHcmlkW10gPSBbXTtcblxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgYWRkR3JpZChncmlkOiBHcmlkKSB7XG4gICAgICAgIHRoaXMuX2dyaWRzLnB1c2goZ3JpZCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZUdyaWQoZ3JpZDogR3JpZCkge1xuICAgICAgICB0aGlzLl9ncmlkcy5zcGxpY2UodGhpcy5fZ3JpZHMuZmluZEluZGV4KGcgPT4gZy5nZW5lcmF0ZWRJZCA9PSBncmlkLmdlbmVyYXRlZElkKSwgMSk7XG4gICAgICAgIHRoaXMuX2dyaWRJdGVtcyA9IHRoaXMuX2dyaWRJdGVtcy5maWx0ZXIoZ2kgPT4gZ2kuZ3JpZElkICE9IGdyaWQuZ2VuZXJhdGVkSWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhdHRhY2hHcmlkSXRlbShncmlkSWQ6IHN0cmluZywgZ3JpZEl0ZW1JZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2dyaWRJdGVtcy5maW5kKGdpID0+IGdpLml0ZW0uZ2VuZXJhdGVkSWQgPT0gZ3JpZEl0ZW1JZCkuZ3JpZElkID0gZ3JpZElkO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXRhY2hHcmlkSXRlbUlmRXhpc3RzKGdyaWRJdGVtSWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBncmlkSXRlbSA9IHRoaXMuX2dyaWRJdGVtcy5maW5kKGdpID0+IGdpLml0ZW0uZ2VuZXJhdGVkSWQgPT0gZ3JpZEl0ZW1JZCk7XG5cbiAgICAgICAgaWYgKCEhZ3JpZEl0ZW0pIHtcbiAgICAgICAgICAgIGdyaWRJdGVtLmdyaWRJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0R3JpZEl0ZW1zKGdyaWRJZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ncmlkSXRlbXMuZmlsdGVyKGdpID0+IGdpLmdyaWRJZCA9PSBncmlkSWQpLm1hcChnID0+IGcuaXRlbSk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldE9ycGhhbkdyaWRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dyaWRJdGVtcy5maWx0ZXIoZ2kgPT4gZ2kuZ3JpZElkID09IG51bGwpLm1hcChnID0+IGcuaXRlbSk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZE9ycGhhbkdyaWRJdGVtKGdyaWRJdGVtOiBHcmlkSXRlbSkge1xuICAgICAgICB0aGlzLl9ncmlkSXRlbXMucHVzaCh7XG4gICAgICAgICAgICBncmlkSWQ6IG51bGwsXG4gICAgICAgICAgICBpdGVtOiBncmlkSXRlbVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlR3JpZEl0ZW0oZ3JpZEl0ZW1JZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2dyaWRJdGVtcy5zcGxpY2UodGhpcy5fZ3JpZEl0ZW1zLmZpbmRJbmRleChnaSA9PiBnaS5pdGVtLmdlbmVyYXRlZElkID09IGdyaWRJdGVtSWQpLCAxKTtcbiAgICB9XG59XG4iXX0=